// vim: set syntax=c:
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT_L 0
#define SYMBOLS_L 1
#define ARROWS_L  2
#define NUMBERS_L 3

&mt {
    tapping-term-ms = <200>;
};

/ {
    chosen {
        zmk,matrix_transform = &five_column_transform;
    };

    behaviors {
        lpar_rpar: lpar_rpar {
            compatible = "zmk,behavior-mod-morph";
            label = "LPAR_RPAR";
            #binding-cells = <0>;
            bindings =
                <&kp LEFT_PARENTHESIS>,
                <&kp RIGHT_PARENTHESIS>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        lbkt_rbkt: lbkt_rbkt {
            compatible = "zmk,behavior-mod-morph";
            label = "LBKT_RBKT";
            #binding-cells = <0>;
            bindings =
                <&kp LEFT_BRACKET>,
                <&kp RIGHT_BRACKET>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        lbrc_rbrc: lbrc_rbrc {
            compatible = "zmk,behavior-mod-morph";
            label = "LBRC_RBRC";
            #binding-cells = <0>;
            bindings =
                <&kp LEFT_BRACE>,
                <&kp RIGHT_BRACE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        dqt_sqt: dqt_sqt {
            compatible = "zmk,behavior-mod-morph";
            label = "dqt_sqt";
            #binding-cells = <0>;
            bindings =
                <&kp DQT>,
                <&kp SQT>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        dot_comma: dot_comma {
            compatible = "zmk,behavior-mod-morph";
            label = "dot_comma";
            #binding-cells = <0>;
            bindings =
                <&kp DOT>,
                <&kp COMMA>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        voldn_volup: voldn_volup {
            compatible = "zmk,behavior-mod-morph";
            label = "voldn_volup";
            #binding-cells = <0>;
            bindings =
                <&kp K_VOL_DN>,
                <&kp K_VOL_UP>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        bridn_briup: bridn_briup {
            compatible = "zmk,behavior-mod-morph";
            label = "bridn_briup";
            #binding-cells = <0>;
            bindings =
                <&kp C_BRI_DN>,
                <&kp C_BRI_UP>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        lang_rang: lang_rang {
            compatible = "zmk,behavior-mod-morph";
            label = "lang_rang";
            #binding-cells = <0>;
            bindings =
                <&kp LESS_THAN>,
                <&kp GREATER_THAN>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        prscrn: prscrn {
            compatible = "zmk,behavior-mod-morph";
            label = "PRSCRN";
            bindings =
                <&kp PRINTSCREEN>,
                <&kp LG(PRINTSCREEN)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        lalt_chord {
            bindings = <&kp LALT>;
            key-positions = <10 11>;
            layers = <8>;
        };

        lgui_chord {
            bindings = <&kp LMETA>;
            key-positions = <11 12>;
            layers = <8>;
        };

        lshfit_chord {
            bindings = <&kp LSHIFT>;
            key-positions = <12 13>;
            layers = <8>;
        };

        lctrl_chord {
            bindings = <&kp LCTRL>;
            key-positions = <13 14>;
            layers = <8>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
       &kp Q        &kp W         &kp F         &kp P      &kp B          &kp J            &kp L        &kp U        &kp Y    &dqt_sqt
  &mt LALT A  &mt LMETA R   &mt LCTRL S  &mt LSHIFT T      &kp G          &kp M     &mt RSHIFT N  &mt RCTRL E  &mt RMETA I  &mt RALT O
     &lt 7 Z        &kp X         &kp C         &kp D      &kp V          &kp K            &kp H    &kp COMMA      &kp DOT    &kp FSLH
                           &lt 8 ESCAPE   &lt 2 SPACE  &lt 3 TAB    &lt 5 ENTER  &lt 4 BACKSPACE    &lt 6 DEL
            >;
        };

        Media {
            bindings = <
     &none      &none      &none       &none  &none         &none             &none         &none         &none         &none
  &kp LALT  &kp LMETA  &kp LCTRL  &kp LSHIFT  &none         &none        &kp K_PREV  &kp K_VOL_DN  &kp K_VOL_UP    &kp K_NEXT
     &none      &none      &none       &none  &none    &bt BT_CLR      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3
                           &none       &none  &none    &kp K_STOP  &kp K_PLAY_PAUSE    &kp K_MUTE
            >;
        };

        Navigation {
            bindings = <
     &none      &none      &none       &none  &none    &kp K_REDO    &kp K_PASTE  &kp K_COPY  &kp K_CUT  &kp K_UNDO
  &kp LALT  &kp LMETA  &kp LCTRL  &kp LSHIFT  &none      &kp CAPS       &kp LEFT    &kp DOWN     &kp UP   &kp RIGHT
     &none      &none      &none       &none  &none    &kp INSERT       &kp HOME   &kp PG_DN  &kp PG_UP     &kp END
                           &none       &none  &none     &kp ENTER  &kp BACKSPACE     &kp DEL
            >;
        };

        Mouse {
            bindings = <
    &trans     &trans     &trans      &trans  &trans    &kp K_REDO  &kp K_PASTE  &kp K_COPY  &kp K_CUT  &kp K_UNDO
  &kp LALT  &kp LMETA  &kp LCTRL  &kp LSHIFT  &trans        &trans       &trans      &trans     &trans      &trans
    &trans     &trans     &trans      &trans  &trans        &trans       &trans      &trans     &trans      &trans
                          &trans      &trans  &trans        &trans       &trans      &trans
            >;
        };

        Number {
            bindings = <
  &lbkt_rbkt  &kp N7   &kp N8  &kp N9  &lbrc_rbrc    &none      &none      &none      &none     &none
    &kp SEMI  &kp N4   &kp N5  &kp N6   &kp EQUAL    &none  &kp RSHFT  &kp RCTRL  &kp RMETA  &kp RALT
   &kp GRAVE  &kp N1   &kp N2  &kp N3    &kp BSLH    &none      &none      &none      &none     &none
                      &kp DOT  &kp N0   &kp MINUS    &none      &none      &none
            >;
        };

        Symbol {
            bindings = <
     &kp LT  &kp AMPS    &kp STAR      &kp GT  &kp QUESTION    &none      &none      &none      &none     &none
  &kp COLON  &kp DLLR   &kp PRCNT   &kp CARET      &kp PLUS    &none  &kp RSHFT  &kp RCTRL  &kp RMETA  &kp RALT
  &kp TILDE  &kp EXCL      &kp AT   &kp POUND      &kp PIPE    &none      &none      &none      &none     &none
                       &lpar_rpar  &lbkt_rbkt    &lbrc_rbrc    &none      &none      &none
            >;
        };

        Function {
            bindings = <
  &kp F12  &kp F7      &kp F8     &kp F9          &prscrn    &none      &none      &none      &none     &none
  &kp F11  &kp F4      &kp F5     &kp F6   &kp SCROLLLOCK    &none  &kp RSHFT  &kp RCTRL  &kp RMETA  &kp RALT
  &kp F10  &kp F1      &kp F2     &kp F3  &kp PAUSE_BREAK    &none      &none      &none      &none     &none
                   &kp K_MENU  &kp SPACE          &kp TAB    &none      &none      &none
            >;
        };

        Button {
            bindings = <
  &kp K_UNDO  &kp K_CUT  &kp K_COPY  &kp K_PASTE  &kp K_REDO    &kp K_REDO  &kp K_PASTE  &kp K_COPY  &kp K_CUT  &kp K_UNDO
    &kp LALT  &kp LMETA   &kp LCTRL   &kp LSHIFT  &kp K_UNDO    &kp K_UNDO    &kp RSHFT   &kp RCTRL  &kp RMETA    &kp RALT
       &none  &kp K_CUT  &kp K_COPY  &kp K_PASTE  &kp K_REDO    &kp K_REDO  &kp K_PASTE  &kp K_COPY  &kp K_CUT       &none
                          &kp LCTRL      &kp TAB     &kp TAB       &kp TAB      &kp TAB     &kp TAB
            >;
        };

        Test {
            bindings = <
  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none
  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none
  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none
                &none  &none  &none    &none  &none  &none
            >;
        };
    };
};
