// vim: set syntax=c:
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT_L 0
#define SYMBOLS_L 1
#define ARROWS_L  2
#define NUMBERS_L 3

/ {
    chosen {
        zmk,matrix_transform = &five_column_transform;
    };

    behaviors {
        lpar_rpar: lpar_rpar {
            compatible = "zmk,behavior-mod-morph";
            label = "LPAR_RPAR";
            #binding-cells = <0>;
            bindings =
                <&kp LEFT_PARENTHESIS>,
                <&kp RIGHT_PARENTHESIS>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        lbkt_rbkt: lbkt_rbkt {
            compatible = "zmk,behavior-mod-morph";
            label = "LBKT_RBKT";
            #binding-cells = <0>;
            bindings =
                <&kp LEFT_BRACKET>,
                <&kp RIGHT_BRACKET>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        lbrc_rbrc: lbrc_rbrc {
            compatible = "zmk,behavior-mod-morph";
            label = "LBRC_RBRC";
            #binding-cells = <0>;
            bindings =
                <&kp LEFT_BRACE>,
                <&kp RIGHT_BRACE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        dqt_sqt: dqt_sqt {
            compatible = "zmk,behavior-mod-morph";
            label = "dqt_sqt";
            #binding-cells = <0>;
            bindings =
                <&kp DQT>,
                <&kp SQT>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        dot_comma: dot_comma {
            compatible = "zmk,behavior-mod-morph";
            label = "dot_comma";
            #binding-cells = <0>;
            bindings =
                <&kp DOT>,
                <&kp COMMA>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        voldn_volup: voldn_volup {
            compatible = "zmk,behavior-mod-morph";
            label = "voldn_volup";
            #binding-cells = <0>;
            bindings =
                <&kp K_VOL_DN>,
                <&kp K_VOL_UP>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        bridn_briup: bridn_briup {
            compatible = "zmk,behavior-mod-morph";
            label = "bridn_briup";
            #binding-cells = <0>;
            bindings =
                <&kp C_BRI_DN>,
                <&kp C_BRI_UP>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        lang_rang: lang_rang {
            compatible = "zmk,behavior-mod-morph";
            label = "lang_rang";
            #binding-cells = <0>;
            bindings =
                <&kp LESS_THAN>,
                <&kp GREATER_THAN>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        prscrn: prscrn {
            compatible = "zmk,behavior-mod-morph";
            label = "PRSCRN";
            bindings =
                <&kp PRINTSCREEN>,
                <&kp LG(PRINTSCREEN)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        NE_is_TAB {
            bindings = <&kp TAB>;
            key-positions = <16 17>;
        };

        ST_is_ESC {
            bindings = <&kp ESC>;
            key-positions = <12 13>;
        };

        RS_is_ENT {
            bindings = <&kp ENTER>;
            key-positions = <11 12>;
        };

        EI_is_BKS {
            bindings = <&kp BACKSPACE>;
            key-positions = <17 18>;
        };

        new_combo {
            bindings = <&mo 2>;
            key-positions = <32 33>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Default {
            label = "DEF";
            bindings = <
  &kp Q  &kp W      &kp F      &kp P  &kp B       &kp J      &kp L       &kp U       &kp Y       &none
  &kp A  &kp R      &kp S      &kp T  &kp G       &kp M      &kp N       &kp E       &kp I       &kp O
  &kp Z  &kp X      &kp C      &kp D  &kp V       &kp K      &kp H  &lpar_rpar  &lbkt_rbkt  &lbrc_rbrc
                &kp LMETA  &kp LCTRL  &mo 1    &kp RALT  &kp SPACE  &kp RSHIFT
            >;
        };

        Extras {
            bindings = <
     &kp F1     &kp F2     &kp F3    &kp F4      &kp F5    &kp K_MUTE  &voldn_volup   &prscrn  &bridn_briup   &none
     &kp N1     &kp N2     &kp N3    &kp N4      &kp N5        &kp N6        &kp N7    &kp N8        &kp N9  &kp N0
  &kp GRAVE  &kp MINUS  &kp EQUAL  &kp BSLH  &dot_comma    &lang_rang      &kp FSLH  &kp SEMI      &dqt_sqt   &none
                           &trans    &trans      &trans        &trans        &trans    &trans
            >;

            label = "EXT";
        };

        Navigation {
            bindings = <
    &kp LG(N1)    &kp LG(N2)        &kp LG(N3)     &kp LG(N4)  &kp LG(N5)         &none  &kp LC(LS(TAB))  &kp PAGE_DOWN  &kp PAGE_UP    &kp LC(TAB)
  &kp LG(LEFT)  &kp LG(DOWN)  &kp LG(UP_ARROW)  &kp LG(RIGHT)     &kp TAB    &kp RSHIFT         &kp LEFT       &kp DOWN       &kp UP      &kp RIGHT
    &kp LG(N6)    &kp LG(N7)        &kp LG(N8)     &kp LG(N9)  &kp LG(N0)         &none     &kp LC(LEFT)       &kp HOME      &kp END  &kp LC(RIGHT)
                                         &none          &none       &none         &none            &none          &none
            >;

            label = "NAV";
        };
    };
};
